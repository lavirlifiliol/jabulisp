int car[10000];
int cdr[10000];
int i[10000];


enum Prim {
    hmul = -13,
    hplus = -12,
    hif = -11,
    hwritei = -10,
    rint = -9,
    hlambda = -8,
    hcons = -7,
    hcar = -6,
    hcdr = -5,
    hwrite = -4
}

enum Syntax {
    nil = -1,
    lp = -2,
    rp = -3
}


int pc = 0;
int oc = 1;

int nabp() {
    int ret = pc;
    pc = pc + 1;
    return ret;
}

int nabo() {
    int ret = oc;
    oc = oc + 1;
    return ret;
}

int program[1000];

int main() {
    int lprogram[1000] = {
        lp, lp, lp, hlambda, -102, lp, -102, -102, rp ,rp, lp, hlambda, -102, lp, hlambda, -101, lp, hif, -101,
            lp, hmul, -101, lp, lp, -102, -102, rp, lp, hplus, rint, -1, -101, rp, rp,rp,
            rint, 1, rp, rp, rp, rp, rint, 20, rp};
    for(int i = 0; lprogram[i] != 0; i=i+1) {
        program[i] = lprogram[i];
    }
    int prog = read();
    write("READ\n");
    writeInt(i[interp(prog, nil)]);
    write("\n");
}

int cons(int a, int b) {
    int slot = nabo();
    car[slot] = a;
    cdr[slot] = b;
    return slot;
}

int writeCons(int c) {
    if (c == 0) {
        write("NULL");
    } else if (c == nil) {
        write("()");
    } else if (c > 0 && (car[c] != 0 || cdr[c] != 0)) {
        write("(");
        writeCons(car[c]);
        write(".");
        writeCons(cdr[c]);
        write(")");
    } else if (c < 0) {
        writeInt(c);
    } else { write("int "); writeInt(i[c]); }

}

int readList() {
    int first = program[pc];
    if (first == rp) {
        nabp();
        return nil;
    } else {
        int item = read();
        int rest = readList();
        return cons(item, rest);
    }
}

int read() {
    int first = program[nabp()];
    if (first == lp) {
        return readList();
    } else if (first == rint) {
        int v = program[nabp()];
        int ret = nabo();
        i[ret] = v;
        return ret;
    } else {
        return first;
    }
}

bool is_cons(int c) {
    return c > 0 && (car[c] != 0 || cdr[c] != 0);
}

int interp(int prog, int env) {
    if (is_cons(prog)) {
        int head = car[prog];
        int args = cdr[prog];
        if (head == hcons) {
            int ocar = interp(car[args], env);
            args = cdr[args];
            int ocdr = interp(car[args], env);
            return cons(ocar, ocdr);
        } else if (head == hcar) {
            int ocons = interp(car[args], env);
            return car[ocons];
        } else if (head == hcdr) {
            int ocons = interp(car[args], env);
            return cdr[ocons];
        } else if (head == hwrite) {
            int arg = interp(car[args], env);
            while(arg != nil) {
                writeChar(i[car[arg]]);
                arg = cdr[arg];
            }
            write("\n");
        } else if (head == hlambda) {
            int param = car[args];
            int body = car[cdr[args]];
            return cons(env, cons(param, cons(body, nil)));
        } else if (head == hwritei) {
            int arg = interp(car[args], env);
            writeInt(i[arg]);
            write("\n");
        } else if (head == hif) {
            int arg = interp(car[args], env);
            if (i[arg] != 0) {
                return interp(car[cdr[args]], env);
            }
            else {
                return interp(car[cdr[cdr[args]]], env);
            }
        } else if (head == hplus) {
            int a = interp(car[args], env);
            args = cdr[args];
            int b = interp(car[args], env);
            int ret = nabo();
            i[ret] = i[a] + i[b];
            return ret;
        } else if (head == hmul) {
            int a = interp(car[args], env);
            args = cdr[args];
            int b = interp(car[args], env);
            int ret = nabo();
            i[ret] = i[a] * i[b];
            return ret;
        } else if (is_cons(head) || head < -99) {
            int ehead = interp(head, env);
            int localenv = car[ehead];
            ehead = cdr[ehead];
            int param = car[ehead];
            ehead = cdr[ehead];
            int body = car[ehead];
            int arg = interp(car[args], env);
            return interp(body, cons(cons(param, arg), localenv));
        } else {
            write("did not understand head:");
            writeInt(head);
            write("\n");
            return 0;
        }
    } else {
        if (prog < -99) {
            int ret = envget(prog, env);
            return ret;
        } else {
            return prog;
        }
    }
}

int envget(int key, int env) {
    if(env == nil) {
        write("Undefined variable!");
        writeInt(key);
        write("\n");
        return 0;
    }
    if (car[car[env]] == key) {
        return cdr[car[env]];
    } else {
        return envget(key, cdr[env]);
    }
}


void writeChar(int c) {
    if (c == 48) write("0");
    else if (c == 49) write("1");
    else if (c == 50) write("2");
    else if (c == 51) write("3");
    else if (c == 52) write("4");
    else if (c == 53) write("5");
    else if (c == 54) write("6");
    else if (c == 55) write("7");
    else if (c == 56) write("8");
    else if (c == 57) write("9");
    else if (c == 97) write("a");
    else if (c == 98) write("b");
    else if (c == 99) write("c");
    else if (c == 100) write("d");
    else if (c == 101) write("e");
    else if (c == 102) write("f");
    else if (c == 103) write("g");
    else if (c == 104) write("h");
    else if (c == 105) write("i");
    else if (c == 106) write("j");
    else if (c == 107) write("k");
    else if (c == 108) write("l");
    else if (c == 109) write("m");
    else if (c == 110) write("n");
    else if (c == 111) write("o");
    else if (c == 112) write("p");
    else if (c == 113) write("q");
    else if (c == 114) write("r");
    else if (c == 115) write("s");
    else if (c == 116) write("t");
    else if (c == 117) write("u");
    else if (c == 118) write("v");
    else if (c == 119) write("w");
    else if (c == 120) write("x");
    else if (c == 121) write("y");
    else if (c == 122) write("z");
    else if (c == 65) write("A");
    else if (c == 66) write("B");
    else if (c == 67) write("C");
    else if (c == 68) write("D");
    else if (c == 69) write("E");
    else if (c == 70) write("F");
    else if (c == 71) write("G");
    else if (c == 72) write("H");
    else if (c == 73) write("I");
    else if (c == 74) write("J");
    else if (c == 75) write("K");
    else if (c == 76) write("L");
    else if (c == 77) write("M");
    else if (c == 78) write("N");
    else if (c == 79) write("O");
    else if (c == 80) write("P");
    else if (c == 81) write("Q");
    else if (c == 82) write("R");
    else if (c == 83) write("S");
    else if (c == 84) write("T");
    else if (c == 85) write("U");
    else if (c == 86) write("V");
    else if (c == 87) write("W");
    else if (c == 88) write("X");
    else if (c == 89) write("Y");
    else if (c == 90) write("Z");
    else if (c == 33) write("!");
    else if (c == 34) write("\"");
    else if (c == 35) write("#");
    else if (c == 36) write("$");
    else if (c == 37) write("%");
    else if (c == 38) write("&");
    else if (c == 39) write("'");
    else if (c == 40) write("(");
    else if (c == 41) write(")");
    else if (c == 42) write("*");
    else if (c == 43) write("+");
    else if (c == 44) write(",");
    else if (c == 45) write("-");
    else if (c == 46) write(".");
    else if (c == 47) write("/");
    else if (c == 58) write(":");
    else if (c == 59) write(";");
    else if (c == 60) write("<");
    else if (c == 61) write("=");
    else if (c == 62) write(">");
    else if (c == 63) write("?");
    else if (c == 64) write("@");
    else if (c == 91) write("[");
    else if (c == 92) write("\\");
    else if (c == 93) write("]");
    else if (c == 94) write("^");
    else if (c == 95) write("_");
    else if (c == 96) write("`");
    else if (c == 123) write("{");
    else if (c == 124) write("|");
    else if (c == 125) write("}");
    else if (c == 126) write("~");
    else if (c == 32) write(" ");
    else writeInt(c);
}

void writeInt(int n) {
    if (n < 0) {
        write "-";
        n = -n;
    }

    int digit = n % 10;
    n = (n - digit) / 10;
    if (n > 0) {
        writeInt(n);
    }

    string output;

    if (digit == 0) output = "0";
    if (digit == 1) output = "1";
    if (digit == 2) output = "2";
    if (digit == 3) output = "3";
    if (digit == 4) output = "4";
    if (digit == 5) output = "5";
    if (digit == 6) output = "6";
    if (digit == 7) output = "7";
    if (digit == 8) output = "8";
    if (digit == 9) output = "9";

    write output;
}
